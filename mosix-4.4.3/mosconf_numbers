#!/bin/sh -
#
# Copyright (c) 2001 - 2015, Amnon BARAK, all rights reserved.
# All rights reserved.
# MOSIX(TM) is a registered trademark of Amnon Barak and Amnon Shiloh.
#
# THIS SOFTWARE IS PROVIDED IN ITS "AS IS" CONDITION, WITH NO WARRANTY
# WHATSOEVER. NO LIABILITY OF ANY KIND FOR ANY DAMAGES WHATSOEVER RESULTING
# FROM THE USE OF THIS SOFTWARE WILL BE ACCEPTED.

PATH=/sbin:/usr/sbin:/usr/local/sbin:/bin:/usr/bin:/usr/local/bin
trap 'rm -f /tmp/.tnm$$ /tmp/.err$$' EXIT
n=0

compute_from_map() {
	b=1
	n=0
	while read first num flags
	do
		case "$first" in "" | *"#"* | 0.0.* | 255.255.255.* | *=*)
			continue ;;
		esac
		case "$num" in [1-9] | [1-9][0-9] | [1-9][0-9][0-9] | \
			[1-9][0-9][0-9][0-9] | [1-2][0-9][0-9][0-9][0-9] | \
			3[0-1][0-9][0-9][0-9] | 32[0-6][0-9][0-9] | \
			327[0-5][0-9] |3276[0-7]) : ;; *) continue ;; esac
		n=`expr $n + 1`
		eval first$n=$first
		eval mosno$n=$b
		if [ `expr $b + $num` -gt 65536 ]
		then
			eval number$n=`expr 65536 - $b`
			break
		else
			eval number$n=$num
		fi
		b=`expr $b + $num`
	done
	return 0
}

valid_ip() {
	case $1 in *.*.*.*.* | 0.0.* | 255.255.255.*) return 1 ;;
		[0-9]*.[0-9]*.[0-9]*.[0-9]*) : ;;
		*) return 1 ;;
	esac
	set - `echo "$1" | sed "s/\./ /g"`
	for chk in $1 $2 $3 $4
	do
		case "$chk" in [0-9] | [1-9][0-9] | 1[0-9][0-9] | 2[0-4][0-9] | 25[0-5]) : ;; *) return 1 ;;
		esac
	done
	return 0
}

read_mapping() {
	n=0
	while read mosno first number
	do
		case "$mosno" in [1-9] | [1-9][0-9] | [1-9][0-9][0-9] | \
			[1-9][0-9][0-9][0-9] | [1-5][0-9][0-9][0-9][0-9] | \
			6[0-4][0-9][0-9][0-9] | 65[0-4][0-9][0-9] | \
			655[0-2][0-9] |6553[0-5]) : ;; *) continue ;; esac
		case "$first" in "" | *"#"* | 0.0.* | 255.255.255.*)
				continue ;;
		esac
		case "$number" in [1-9] | [1-9][0-9] | [1-9][0-9][0-9] | \
			[1-9][0-9][0-9][0-9] | [1-2][0-9][0-9][0-9][0-9] | \
			6[0-4][0-9][0-9][0-9] | 65[0-4][0-9][0-9] | \
			655[0-2][0-9] |6553[0-5]) : ;; *) continue ;; esac
		[ `expr $mosno + $number` -gt 65536 ] && continue
		n=`expr $n + 1`
		eval mosno$n=$mosno
		eval first$n=$first
		eval number$n=$number
	done
	return 0
}

sort() {
	i=1
	while [ $i -lt $n ]
	do
		eval m=\$mosno$i
		j=`expr $i + 1`
		while [ $j -le $n ]
		do
			eval q=\$mosno$j
			[ $q -lt $m ] && {
				eval mosno$i=$q
				eval mosno$j=$m
				m=$q
				eval t=\$first$i
				eval first$i=\$first$j
				eval first$j=$t
				eval t=\$number$i
				eval number$i=\$number$j
				eval number$j=$t
			}
			j=`expr $j + 1`
		done
		i=`expr $i + 1`
	done
}
if [ -f $ROOT/etc/mosix/userview.map ]
then
	read_mapping < $ROOT/etc/mosix/userview.map
elif [ -f $ROOT/etc/mosix/mosix.map ]
then
	read_from_map < $ROOT/etc/mosix/mosix.map
fi
sort

while :
do
	echo
	echo Mappings of host-names/IP-addresses to MOSIX node numbers:
	echo ==========================================================
	case "$n" in 0) echo There are no mappings yet: ;; *)
		> /tmp/.tnm$$
		i=1
		while [ $i -le $n ]
		do
			eval echo \$mosno$i \$first$i \$number$i ">> /tmp/.tnm$$" 
			i=`expr $i + 1`
		done
		awk 'BEGIN {x=4;y=4;z=10;n=1} {
			if(length($1) > x) x=length($1); a[n] = $1;
			if(length($2) > y) y=length($2); b[n] = $2;
			if(length($3) > z) z=length($3); c[n] = $3;
			n=n+1;}
		     END {
			h="Entry  Node";
			for(i=4;i<x;i++)h=h " ";
			if(y >= 7){f="  Host/IP";i=7}else{f="  From";i=4}
			for(;i<y;i++) f=f " ";
			h=h f "  # of nodes";print h;
			h="";for(i=x+y+z+11;i>0;i--)h=h "-";print h;
			format="%-5s  %-" x "s  %-" y "s  %s\n";
			for(i = 1 ; i < n ; i++)
				printf format, i ".", a[i], b[i], c[i];
			}' < /tmp/.tnm$$
	esac
	echo
	echo To add a new mapping type "'n'".
	echo To initialize the mappings to the nodes in this cluster, type "'i'".
	[ $n != 0 ] && {
	echo To modify an entry, type its entry number.
	echo "To delete an entry, type 'd' followed by that entry-number (eg. d"$n\).
	}
	echo "For help, type 'h'.  When finished, type 'q' (to abandon all changes type 'Q')."
	echo
	echo -n "Option :- "
	read opt
	case "$opt" in
		i) if [ -f $ROOT/etc/mosix/mosix.map ]
		   then
			compute_from_map < $ROOT/etc/mosix/mosix.map
		   else
			echo Sorry, no nodes are defined in this cluster yet!
		   fi ;;
		[1-9]|[1-9][0-9]|[1-9][0-9][0-9])
		[ $opt -gt $n ] && continue
		echo
		echo "Modifying entry #$opt:"
		echo
		eval prev=\$mosno$opt
		echo -n "MOSIX node number ($prev) :- "
		read mosno
		case "$mosno" in "") mosno=$prev ;;
			[1-9]|[1-9][0-9]|[1-9][0-9][0-9]|[1-9][0-9][0-9][0-9]|\
				[1-9][0-9][0-9][0-9][0-9])
				[ $mosno -gt 65535 ] && {
					echo Invalid MOSIX node number.
					continue
				}
				;;
			*) echo Invalid MOSIX node number.
			   continue ;;
		esac
		eval prev=\$first$opt
		echo -n "Hostname or IP-address ($prev) :- "
		read first
		case "$first" in "") first=$prev ;;
			*[\ \	\#\\]*) echo Invalid host-name. ; continue ;;
			[a-zA-Z]*) changed=y ; major_change=y ;;
			[0-9]*) valid_ip $first || {
				echo Invalid IP address.
				continue
			}
			;;
			*) echo Invalid host-name.
			   continue ;;
		esac
		eval prev=\$number$opt
		echo -n "Number of nodes ($prev) :- "
		read number
		case "$number" in "") number=$prev ;;
			[1-9]|[1-9][0-9]|[1-9][0-9][0-9]|[1-9][0-9][0-9][0-9]|\
				[1-9][0-9][0-9][0-9][0-9])
				[ `expr $mosno + $number` -gt 65536 ] && {
					echo Too many nodes.
					continue
				}
				;;
			*) echo Invalid number of nodes.
			   continue ;;
		esac
		eval mosno$opt=$mosno
		eval first$opt=$first
		eval number$opt=$number
		sort
		continue
		;;
		n)
		echo
		echo Adding a new mapping:
		echo
		echo -n "MOSIX node number :- "
		read mosno
		case "$mosno" in "") continue ;;
			[1-9]|[1-9][0-9]|[1-9][0-9][0-9]|[1-9][0-9][0-9][0-9]|\
				[1-9][0-9][0-9][0-9][0-9])
				[ $mosno -gt 65535 ] && {
					echo Invalid MOSIX node number.
					continue
				}
				;;
			*) echo Invalid MOSIX node number.
			   continue ;;
		esac
		echo -n "Host-name or IP address :- "
		read first
		case "$first" in "") continue ;;
			*[\ \	\#\\]*) echo Invalid host-name. ; continue ;;
			[a-zA-Z]*) : ;;
			[0-9]*) valid_ip $first || {
				echo Invalid IP address.
				continue
			} ;;
			*) echo Invalid host-name.
			   continue ;;
		esac
		echo -n "Number of nodes :- "
		read number
		case "$number" in "") continue ;;
			[1-9]|[1-9][0-9]|[1-9][0-9][0-9]|[1-9][0-9][0-9][0-9]|\
				[1-9][0-9][0-9][0-9][0-9])
				[ `expr $mosno + $number` -gt 65536 ] && {
					echo Too many nodes.
					continue
				} ;;
			*) echo Invalid number of nodes.
			   continue ;;
		esac
		n=`expr $n + 1`
		eval mosno$n=$mosno
		eval first$n=$first
		eval number$n=$number
		sort
		continue
		;;
		d[1-9]|d[1-9][0-9]|d[1-9][0-9][0-9])
		del=`expr $opt : "d\(.*\)"`
		[ $del -gt $n ] && continue
		while [ $del -lt $n ]
		do
			up=`expr $del + 1`
			eval mosno$del=\$mosno$up
			eval first$del=\$first$up
			eval number$del=\$number$up
			del=$up
		done
		n=`expr $n - 1`
		continue
		;;
		[hH]*)
		echo
		echo "While MOSIX recognizes nodes by their IP addresses (or host-names"
		echo "that convert into IP addresses), node numbers are more convenient"
		echo "to specify as arguments to MOSIX programs.  Node numbers are also"
		echo "necessary for the 'mon' display."
		echo
		echo Each entry maps a set of nodes with consecutive IP addresses to
		echo consecutive node numbers.
		echo
		echo It is recommended to assign node-numbers to all the nodes in your cluster:
		echo unless you have specific numbering-preferences, you can do it instantly
		echo -n "by using the 'i' option."
		case "$MULTI" in y)
			echo "  If you wish, you may also assign node-numbers"
			echo to nodes from other clusters in your multi-cluster private cloud. ;;
			*) echo ;;
		esac
		echo
		echo Node numbers can be between 1 and 65535.
		echo
		echo -n "Press <Enter> to continue"
		read anything
		continue
		;;
		q*) > /tmp/.tnm$$ || {
				echo Sorry, failed to create temporary file.
				exit 1
			}
			i=1
			while [ $i -le $n ]
			do
				eval echo \$mosno$i \$first$i \$number$i ">>/tmp/.tnm$$"
				i=`expr $i + 1`
			done
			case $ROOT in "") flag=U ;; *) flag=u ;; esac
			[ $n = 0 ] && break
			mos_checkconf -$flag /tmp/.tnm$$ 2>/tmp/.err$$ || {
				echo A problem was detected:
				sed -e "s/^/*** /" -e "s/$/ ***/" < /tmp/.err$$
				echo
				echo -n "Press <Enter> to continue and correct it..."
				read something
				continue
			}
			break ;;
		Q*) exit 0 ;;
		*) continue ;;
	esac
done
cat /tmp/.tnm$$ > $ROOT/etc/mosix/userview.map || {
	echo "Failed writing the new configuration to $ROOT/etc/mosix/userview.map!"
	exit 1
}
echo
echo Mappings saved.
echo
