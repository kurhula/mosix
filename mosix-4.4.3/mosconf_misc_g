#!/bin/sh -
#
# Copyright (c) 2001 - 2015, Amnon BARAK, all rights reserved.
# All rights reserved.
# MOSIX(TM) is a registered trademark of Amnon Barak and Amnon Shiloh.
#
# THIS SOFTWARE IS PROVIDED IN ITS "AS IS" CONDITION, WITH NO WARRANTY
# WHATSOEVER. NO LIABILITY OF ANY KIND FOR ANY DAMAGES WHATSOEVER RESULTING
# FROM THE USE OF THIS SOFTWARE WILL BE ACCEPTED.

PATH=/sbin:/usr/sbin:/usr/local/sbin:/bin:/usr/bin:/usr/local/bin
trap 'rm -f /tmp/.msc$$ /tmp/.err$$' EXIT

isint() {
	case $1 in ""|*[!0-9]*) return 1 ;; *) return 0 ;; esac
}

valid_ip() {
	case $1 in *.*.*.*.*.* | 0.0.* | 255.255.255.*) return 1 ;;
		[0-9]*.[0-9]*.[0-9]*.[0-9]*) : ;;
		*) return 1 ;;
	esac
	set - `echo "$1" | sed "s/\./ /g"`
	for chk in $1 $2 $3 $4
	do
		case "$chk" in [0-9] | [1-9][0-9] | 1[0-9][0-9] | 2[0-4][0-9] | 25[0-5]) : ;; *) return 1 ;;
		esac
	done
	return 0
}

read_conf() {
	speed=
	retain=0
	guests=
	user=root
	dir_o=
	mem_o=
	dir_c=
	mem_c=
	dir_g=
	mem_g=
	mip=
	[ -f $ROOT/etc/mosix/speed ] && read s more < $ROOT/etc/mosix/speed && \
		isint "$s" && [ "$s" -gt 0 ] && speed=$s
	[ -f $ROOT/etc/mosix/retainpri ] && \
		read p more < $ROOT/etc/mosix/retainpri && isint "$p" && \
			retain=$p
	[ -f $ROOT/etc/mosix/mosip ] && \
		read ip more < $ROOT/etc/mosix/mosip && valid_ip "$ip" && \
		mip=$ip
	[ -f $ROOT/etc/mosix/maxguests ] && \
		read g more < $ROOT/etc/mosix/maxguests && isint "$g" && \
		guests=$g
	if [ -f $ROOT/etc/mosix/private.conf ]
	then
	while read who dir mem more
	do
		case "$dir" in /*) : ;; *) continue ;; esac
		isint "$mem" || mem=
		case "$who" in *O*) case "$dir_o" in "")
					dir_o=$dir ; mem_o=$mem ;; esac ;; esac
		case "$who" in *C*) case "$dir_c" in "")
					dir_c=$dir ; mem_c=$mem ;; esac ;; esac
		case "$who" in *G*) case "$dir_g" in "")
					dir_g=$dir ; mem_g=$mem ;; esac ;; esac
	done  < $ROOT/etc/mosix/private.conf
	else
		dir_o=/private
		dir_c=/private
		dir_g=/private
	fi
}

while :
do
	read_conf
	echo
	echo Miscellaneous MOSIX policies:
	echo =============================
	case $speed in "") echo a. Processor speed is automatically detected. ;;
		*) echo a. Processor speed is fixed at $speed units. ;;
	esac
	case $retain in 0) echo b. Node priority is not retained for any extra time. ;;
		1) echo b. Node priority is retained for an extra one second ;;
		*) echo b. Node priority is retained for an extra $retain seconds ;;
	esac
	case "$guests" in "")
		echo c. The number of guest processes from other clusters is unlimited. ;;
		*) echo c. The number of guest processes from other clusters in the multi-cluster
		   echo "   private cloud is limited to $guests." ;;
	esac
	case "$ROOT" in ?*) who="the node being configured" ;;
		*) who="this node" ;;
	esac
	case "$mip" in "") echo d. No specific IP address is associated with $who. ;;
		*) echo d. MOSIX is using IP address $mip for $who.
		   case "$ROOT" in ?*)
			echo "   CAUTION: if you are configuring MOSIX for several nodes at once,"
			echo "            you cannot have all of them use the same IP address!" ;;
		  esac ;;
	esac
	en=dis
	[ -f $ROOT/etc/mosix/.log_mosrun ] && en=en
	echo "e. Logging calls to 'mosrun' and migrations is $en""abled."
	echo "f. Storage allocation for Private-Temporary-Files (PTFs):"
	case "$dir_o" in "") echo "   Local processes have no allocation." ;;
		*) echo "   Local processes use \"$dir_o\","
		   case "$mem_o" in "")
		   echo "             allowing the default of up to 5GB per process." ;;
	        *) echo "             allowing up to $mem_o""MB per process." ;;
	esac ;; esac
	case "$dir_c" in "") echo "   guest processes from the cluster have no allocation." ;;
		*) echo "   Guest processes from this cluster use \"$dir_c\","
		   case "$mem_c" in "")
		   echo "             allowing the default of up to 2GB per process." ;;
	        *) echo "             allowing up to $mem_c""MB per process." ;;
	esac ;; esac
	case "$dir_g" in "") echo "   guest processes from the other clusters have no allocation." ;;
		*) echo "   Guest processes from other clusters use \"$dir_g\","
		   case "$mem_g" in "")
		   echo "             allowing the default of up to 1GB per process." ;;
	        *) echo "             allowing up to $mem_g""MB per process." ;;
	esac ;; esac
	echo
	echo "Type <a>-<f> to modify a policy."
	echo "Type <ha>-<hf> for help about a policy."
	echo "Type 'q' to exit."
	echo
	echo -n "Option :- "
	read opt
	case "$opt" in
		[aA]) echo
			echo "Generally, 10000 units represent a 3GHz Intel Core 2 Duo E6850."
			echo Increase/decrease the number of units proportionally for faster/slower CPUs.
			case $speed in ?*)
				echo "For automatic detection, type '-'."
				echo
				echo -n "Processor speed (default=$speed) :- " ;;
				*)
				echo
				echo -n "Processor speed (default=auto-detected) :- " ;;
			esac
			read s
			case "$s" in "") : ;;
				-) rm -f $ROOT/etc/mosix/speed ;;
				*) if isint "$s" && [ $s -gt 0 ]
				   then
					echo $s > $ROOT/etc/mosix/speed
				   else
					echo Improper value.
				   fi
			esac ;;
		[bB]) echo
			echo How many extra seconds to retain the node-priority, not allowing
			echo lower-priority processes to arrive after all higher-priority
			echo -n "processes exited (default=$retain) :- "
			read s
			case "$s" in "") : ;;
				0) rm -f $ROOT/etc/mosix/retainpri ;;
				*) if isint "$s"
				   then
					echo $s > $ROOT/etc/mosix/retainpri
				   else
					echo Improper value.
				   fi
			esac ;;
		[cC]) echo
			case $guests in "")
				echo -n "How many guest processes from other clusters to accept :- " ;;
				*)
				echo How many guest processes from other clusters to accept
				echo -n "(currently $guests ; type '-' to restore the system default) :- " ;;
			esac 
			read g
			case "$g" in "") : ;;
				-) rm -f $ROOT/etc/mosix/maxguests ; guests= ;;
				*) if isint "$g"
				   then
					echo $g > $ROOT/etc/mosix/maxguests
				   else
					echo Improper value.
				   fi
			esac ;;
		[dD]) echo
		      case $ROOT in ?*)
			echo CAUTION: if you are configuring MOSIX for several nodes at once,
			case "$mip" in "") echo you should not use this option. ;;
				*) echo you should cancel this option. ;;
			esac
			echo ;;
		     esac
		     case $mip in "") mip=none ;;
			*) mip="$mip; '-' to cancel" ;;
		     esac
		     echo -n "IP address to be used by MOSIX (default=$mip) :- "
		     read i
		     case "$i" in -) rm -f $ROOT/etc/mosix/mosip
				case `mossetpe -r` in This*) mossetpe >/dev/null 2>&1 ;; esac ;;
			"") : ;;
			*) if valid_ip "$i"
			   then
				echo $i > $ROOT/etc/mosix/mosip
				case `mossetpe -r` in This*) mossetpe >/dev/null 2>&1 ;; esac
			   else
				echo Invalid IP address.
			   fi
		     esac ;;
		[eE]) if [ -f $ROOT/etc/mosix/.log_mosrun ]
		      then
				rm -f $ROOT/etc/mosix/.log_mosrun
		      else
				> $ROOT/etc/mosix/.log_mosrun
		      fi
		      ;;
		[fF]) echo
			case "$dir_o" in "") def=none ;;
				*) def="$dir_o; '-' to cancel" ;;
			esac
			echo "Enter a directory (starting with '/') where storage"
			echo "is allocated for Private Temporary Files (PTFs) of local processes"
			echo -n "(default=$def) :- "
			read d more
			case "$more" in ?*) echo Improper reply ; continue ;; esac
			case "$d" in -) dir_o= ; mem_o= ;;
				"") : ;;
				/*) dir_o=$d ;;
				*) echo Improper directory ; continue ;;
			esac
			case $dir_o in /*)
				case $mem_o in "") def=5GB ; mem_o=5120 ;;
					*) def=$mem_o ;;
				esac
				echo
				echo Enter the maximum amount of disk-space in MegaBytes that
				echo each local process is allowed to use for Private Temporary Files
				echo -n "(default=$def) :- "
				read m
				case "$m" in "") : ;;
					*) if isint "$m"
					   then
						mem_o=$m
					   else
						echo Improper value.
						continue
					   fi ;;
				esac
			esac
			case "$dir_c" in "") def=none ;;
				*) def="$dir_c; '-' to cancel" ;;
			esac
			echo
			echo "Enter a directory (starting with '/') where storage is allocated"
			echo for Private Temporary Files of guest processes from this cluster
			echo -n "(default=$def) :- "
			read d more
			case "$more" in ?*) echo Improper reply ; continue ;; esac
			case "$d" in -) dir_c= ; mem_c= ;;
				"") : ;;
				/*) dir_c=$d ;;
				*) echo Improper directory ; continue ;;
			esac
			case $dir_c in /*)
				case $mem_c in "") def=2GB ; mem_c=2048 ;;
					*) def=$mem_c ;;
				esac
				echo
				echo Enter the maximum amount of disk-space in MegaBytes that each guest
				echo process from the cluster is allowed to use for Private Temporary Files
				echo -n "(default=$def) :- "
				read m
				case "$m" in "") : ;;
					*) if isint "$m"
					   then
						mem_c=$m
					   else
						echo Improper value.
						continue
					   fi ;;
				esac
			esac
			case "$dir_g" in "") def=none ;;
				*) def="$dir_g; '-' to cancel" ;;
			esac
			echo
			echo "Enter a directory (starting with '/') where storage is allocated for Private"
			echo Temporary Files of guest processes from other clusters in the multi-cluster
			echo -n "private cloud (default=$def) :- "
			read d more
			case "$more" in ?*) echo Improper reply ; continue ;; esac
			case "$d" in -) dir_g= ; mem_g= ;;
				"") : ;;
				/*) dir_g=$d ;;
				*) echo Improper directory ; continue ;;
			esac
			case $dir_g in /*)
				case $mem_g in "") def=1GB ; mem_g=1024 ;;
					*) def=$mem_g ;;
				esac
				echo
				echo Enter the maximum amount of disk-space in MegaBytes that each guest-process
				echo from another cluster is allowed to use for Private Temporary Files
				echo -n "(default=$def) :- "
				read m
				case "$m" in "") : ;;
					*) if isint "$m"
					   then
						mem_g=$m
					   else
						echo Improper value.
						continue
					   fi ;;
				esac
			esac
			[ "$dir_o" = "/private" -a "$mem_o" = 5120 -a \
				"$dir_c" = "/private" -a "$mem_c" = 2048 -a \
				"$dir_g" = "/private" -a "$mem_g" = 1024 ] && {
				rm -f $ROOT/etc/mosix/private.conf
				continue
			}
			> /tmp/.msc$$
			case "$dir_o" in ?*)
				echo "O $dir_o $mem_o" >> /tmp/.msc$$ ;;
			esac
			case "$dir_c" in ?*)
				echo "C $dir_c $mem_c" >> /tmp/.msc$$ ;;
			esac
			case "$dir_g" in ?*)
				echo "G $dir_g $mem_g" >> /tmp/.msc$$ ;;
			esac
			mv /tmp/.msc$$ $ROOT/etc/mosix/private.conf
			;;
		[hH][aA]) echo
			echo You have the option of fixing the CPU speed to a given value:
			echo "normally this option is not needed because the speed of the CPU(s)"
			echo is detected correctly when the kernel boots.  You should however consider
			echo this option in the following two cases:
			echo
		        echo "1. When you have a heterogeneous cluster and always use MOSIX to run"
			echo "   a specific program (or programs) that perform better on certain"
			echo "   CPU-types than on others."
			echo
		        echo "2. On Virtual-Machines that run over a hosting operating-system:"
			echo "   in this case, the speed that the kernel detects is unreliable"
			echo "   and can vary significantly depending on the load of the underlying"
			echo "   operating-systems when it boots."
			echo
			echo The speed is an integer, where 10000 represents a 3GHz Intel Core 2 Duo E6850 -
			echo it is higher on faster CPUs and smaller on slower ones.
			echo
			echo -n "Press <Enter> to continue..."
			read anything ;;
		[hH][bB]) echo
			echo Once all processes of a higher priority leave or exit, a node may accept
			echo guest processes of a lower priority.  Usually the lower-priority processes
			echo can arrive as soon as the higher-priority processes exit, but you can
			echo introduce a delay, so they may only start arriving a few seconds later
			echo "(if no new higher-priority processes started or arrived since)."
			echo
			echo -n "Press <Enter> to continue..."
			read anything ;;
		[hH][cC]) echo
			case "$ROOT" in
				?*) who="the node(s) being configured" ;;
				*) who="this node" ;;
			esac
			echo You can set a limit on the number of guest processes from other clusters
			echo in the multi-cluster private cloud that are allowed to run at any time on
			echo $who - otherwise, the system default is 8 times
			echo the number of processors.
			echo "(there is no limit on the number of guest processes from your own cluster)"
			echo
			echo -n "Press <Enter> to continue..."
			read anything ;;
		[hH][dD]) echo
			echo Specifying which IP address is used for MOSIX is a very rare option.
			echo It is only required when a node has multiple IP addresses \(as shown
			echo by the output of \"ifconfig\"\) and two or more of those addresses
			echo appear on the list of potential nodes in the cluster, or when for
			echo some reason the output of \"ifconfig\" does not include the IP address
			echo which should be used for MOSIX.
			echo
			echo -n "Press <Enter> to continue..."
			read anything ;;
		[hH][eE]) echo
			  echo "It is optional to accumulate information about calls to 'mosrun'" 
			  echo "and process migrations in the system-log (usually /var/log/messages)."
			  echo
			  echo -n "Press <Enter> to continue..."
			  read anything ;;
		[hH][fF]) echo
			echo "Private Temporary Files (PTFs) allow processes to migrate with their"
			echo temporary files: this requires the allocation of disk-space wherever
			echo processes that use PTFs migrate - not only on their home-nodes.
			echo
			echo It is a usually a good practice to set aside a dedicated partition for
			echo PTFs, but a possible concern is that guest processes might use up this
			echo partition, thus causing local processes to fail.
			echo
			echo The solution is to dedicate separate partitions for PTFs of local
			echo processes and PTFs of guest processes.  In fact, it is possible to
			echo dedicate up to three different partitions: for local processes, for
			echo guest processes from the local cluster and for guest processes from
			echo other clusters.
			echo
			echo This configuration asks for directories where PTFs are stored: when
			echo possible, these directories should be mount-points of dedicated partitions.
			echo
			echo "You should also configure the maximum PTF disk-space (in MegaBytes)"
			echo that may be used by each process.  This maximum can be different for
			echo local processes and guests from the local cluster or the other clusters.
			echo Local processes should usually be allowed more space.
			echo
			echo -n "Press <Enter> to continue..."
			read anything ;;
		[qQ]*) exit 0 ;;
		*) echo Invalid option. ;;
	esac
done
